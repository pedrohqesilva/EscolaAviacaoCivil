// <auto-generated />
using System;
using Aeroportos.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Aeroportos.Context.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbAeroportos")
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Aeroportos.Domain.Entities.Aeroporto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CodigoIcao")
                        .IsRequired()
                        .HasColumnName("CODIGO_ICAO")
                        .HasMaxLength(5)
                        .IsUnicode(true);

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DATA_CRIACAO")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnName("DATA_EXCLUSAO");

                    b.Property<DateTime?>("DataModificacao")
                        .HasColumnName("DATA_MODIFICACAO");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnName("DESCRICAO")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<int>("EnderecoId")
                        .HasColumnName("ENDERECO_ID");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("GUID")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<bool>("IsExcluido")
                        .HasColumnName("EXCLUIDO");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("NOME")
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.Property<int>("TipoAeroportoId")
                        .HasColumnName("TIPO_AEROPORTO_ID");

                    b.HasKey("Id");

                    b.HasAlternateKey("CodigoIcao");


                    b.HasAlternateKey("Guid");

                    b.HasIndex("EnderecoId")
                        .IsUnique();

                    b.HasIndex("TipoAeroportoId");

                    b.ToTable("AEROPORTO");
                });

            modelBuilder.Entity("Aeroportos.Domain.Entities.Cidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DATA_CRIACAO")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnName("DATA_EXCLUSAO");

                    b.Property<DateTime?>("DataModificacao")
                        .HasColumnName("DATA_MODIFICACAO");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnName("DESCRICAO")
                        .HasMaxLength(5)
                        .IsUnicode(true);

                    b.Property<int>("EstadoId")
                        .HasColumnName("ESTADO_ID");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("GUID")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<bool>("IsExcluido")
                        .HasColumnName("EXCLUIDO");

                    b.Property<string>("Sigla")
                        .IsRequired()
                        .HasColumnName("SIGLA")
                        .HasMaxLength(5)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.HasAlternateKey("Guid");

                    b.HasIndex("EstadoId");

                    b.ToTable("CIDADE");
                });

            modelBuilder.Entity("Aeroportos.Domain.Entities.Endereco", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AeroportoId")
                        .HasColumnName("AEROPORTO_ID");

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasColumnName("BAIRRO")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasColumnName("CEP")
                        .HasMaxLength(8)
                        .IsUnicode(true);

                    b.Property<int>("CidadeId")
                        .HasColumnName("CIDADE_ID");

                    b.Property<string>("Complemento")
                        .HasColumnName("COMPLEMENTO")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DATA_CRIACAO")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnName("DATA_EXCLUSAO");

                    b.Property<DateTime?>("DataModificacao")
                        .HasColumnName("DATA_MODIFICACAO");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("GUID")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<bool>("IsExcluido")
                        .HasColumnName("EXCLUIDO");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasColumnName("LOGRADOURO")
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.Property<int>("Numero")
                        .HasColumnName("NUMERO");

                    b.HasKey("Id");

                    b.HasAlternateKey("Guid");

                    b.HasIndex("CidadeId");

                    b.ToTable("ENDERECO");
                });

            modelBuilder.Entity("Aeroportos.Domain.Entities.Estado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DATA_CRIACAO")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnName("DATA_EXCLUSAO");

                    b.Property<DateTime?>("DataModificacao")
                        .HasColumnName("DATA_MODIFICACAO");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnName("DESCRICAO")
                        .HasMaxLength(5)
                        .IsUnicode(true);

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("GUID")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<bool>("IsExcluido")
                        .HasColumnName("EXCLUIDO");

                    b.Property<int>("PaisId")
                        .HasColumnName("PAIS_ID");

                    b.Property<string>("Sigla")
                        .IsRequired()
                        .HasColumnName("SIGLA")
                        .HasMaxLength(5)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.HasAlternateKey("Guid");


                    b.HasAlternateKey("Sigla");

                    b.HasIndex("PaisId");

                    b.ToTable("ESTADO");
                });

            modelBuilder.Entity("Aeroportos.Domain.Entities.Pais", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DATA_CRIACAO")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnName("DATA_EXCLUSAO");

                    b.Property<DateTime?>("DataModificacao")
                        .HasColumnName("DATA_MODIFICACAO");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnName("DESCRICAO")
                        .HasMaxLength(5)
                        .IsUnicode(true);

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("GUID")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<bool>("IsExcluido")
                        .HasColumnName("EXCLUIDO");

                    b.Property<string>("Sigla")
                        .IsRequired()
                        .HasColumnName("SIGLA")
                        .HasMaxLength(5)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.HasAlternateKey("Guid");


                    b.HasAlternateKey("Sigla");

                    b.ToTable("PAIS");
                });

            modelBuilder.Entity("Aeroportos.Domain.Entities.TipoAeroporto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DATA_CRIACAO")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnName("DATA_EXCLUSAO");

                    b.Property<DateTime?>("DataModificacao")
                        .HasColumnName("DATA_MODIFICACAO");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnName("DESCRICAO")
                        .HasMaxLength(5)
                        .IsUnicode(true);

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("GUID")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<bool>("IsExcluido")
                        .HasColumnName("EXCLUIDO");

                    b.Property<string>("Sigla")
                        .IsRequired()
                        .HasColumnName("SIGLA")
                        .HasMaxLength(5)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.HasAlternateKey("Guid");


                    b.HasAlternateKey("Sigla");

                    b.ToTable("TIPO_AEROPORTO");
                });

            modelBuilder.Entity("Aeroportos.Domain.Entities.Aeroporto", b =>
                {
                    b.HasOne("Aeroportos.Domain.Entities.Endereco", "Endereco")
                        .WithOne("Aeroporto")
                        .HasForeignKey("Aeroportos.Domain.Entities.Aeroporto", "EnderecoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Aeroportos.Domain.Entities.TipoAeroporto", "TipoAeroporto")
                        .WithMany("Aeroportos")
                        .HasForeignKey("TipoAeroportoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Aeroportos.Domain.Entities.Cidade", b =>
                {
                    b.HasOne("Aeroportos.Domain.Entities.Estado", "Estado")
                        .WithMany("Cidades")
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Aeroportos.Domain.Entities.Endereco", b =>
                {
                    b.HasOne("Aeroportos.Domain.Entities.Cidade", "Cidade")
                        .WithMany("Enderecos")
                        .HasForeignKey("CidadeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Aeroportos.Domain.Entities.Estado", b =>
                {
                    b.HasOne("Aeroportos.Domain.Entities.Pais", "Pais")
                        .WithMany("Estados")
                        .HasForeignKey("PaisId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
